---
title: Externalizing Configurations for .NET Framework Apps
owner: Buildpacks
---

This topic explains how to use the Web Config Transform Extension Buildpack for .NET apps.  

## <a id='prerequisites'></a>Prerequisites

* Linux, Windows or MacOS development machine or VM.
* A foundation with Windows cells available to push to.

## <a id='overview'></a> Overview

Cloud Native Applications are expected to bring in configurations from external sources like environment variables, config servers, etc. 

In applications that run on IIS (e.g. ASP.NET applications), configuration settings are injected through Web.config files.  As per cloud native principles, configuration should stay out of build artifacts. This extension buildpack provides a solution to this problem by using token replacement during ‘cf push’ staging. 

The .NET Framework Web Config Transform Extension Buildpack injects environment-specific appSettings and connectionString values 
by performing token replacements during `cf push` staging.  

To leverage the .NET Framework Web Config Transform Extension Buildpack, complete the following procedures:  

1. [Identify Environment Dependent Configurations and Externalize](#tokenize)
1. [Create a Parameterized Cloud Foundry App Manifest](#create-manifest)
1. [Establish a Spring Cloud Config Server](#move-to-spring-cloud)
1. [Push the App](#push-app)

<p class='note'><strong>Note:</strong> The Web Config Transform Extension Buildpack can inject appSettings and 
    connectionStrings regardless of whether the replacement tokens are present in the <code>Web.Release.Config</code> file.
</p>

## <a id='tokenize'></a> Identify Environment-Dependent Configurations and Externalize

Your `Web.config` environment-specific settings must be replaced with placeholder tokens and their values externalized 
outside of your application.  

<p class='note'><strong>Note:</strong> When debugging on a developer machine, transform the <i>debug</i> file <code>Web.Debug.config</code> and use the <code>Debug</code> configuration profile.
</p> 

To externalize your workload's environment-specific configuration settings, complete the following steps:  

1. Backup your workload's `Web.config`, and its `Web.Debug.config`, and `Web.Release.config` transform files.  

1. Review and identify your `Web.config` and its transform files for environment-specific configuration settings.  
<br>
    For example, the `connectionString` properties in the sample files below are environment-specific:  
<br>
    **Web.Config**

    ```xml
    <connectionStrings>
        <add name="MyDB" 
             connectionString="Data Source=LocalSQLServer;Initial Catalog=MyReleaseDB;User ID=serviceacc3;Password=PaKsAsEwWoOrOdT3" />
    </connectionStrings>
    ```

    **Web.Debug.config**

    ```xml
    <connectionStrings>
        <add name="TestDB" 
             connectionString="Data Source=ReleaseSQLServer;Initial Catalog=TestDB010;User ID=testaccount;Password=ABC123!" 
             xdt:Transform="SetAttributes" 
             xdt:Locator="Match(name)"/>
    </connectionStrings>
    ```

    **Web.Release.config**

    ```xml
    <connectionStrings>
        <add name="MyDB" 
             connectionString="Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;User ID=serviceacc3;Password=PaKsAsEwWoOrOdT3" 
             xdt:Transform="SetAttributes" 
             xdt:Locator="Match(name)"/>
    </connectionStrings>
    ```



1. Tokenize your `Web.Debug.config` and `Web.Release.config` environment-specific properties by replacing hard-coded values 
with tokens following the format `#{configPath:key}`.  
<br>
    For example:  
<br>

    **Tokenized Web.Release.config**

    ```xml
    <?xml version="1.0" encoding="utf-8"?>
    <!-- For Cloud Foundry -->
    <configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
  
      <connectionStrings  xdt:Transform="Replace">
        <add name="MyDB" connectionString="#{connectionStrings:MyDB}" providerName="System.Data.SqlClient"/>
      </connectionStrings>
  
      <system.serviceModel>
        <client xdt:Transform="Replace">
      
          <endpoint 
            address="#{client:Default_IMyLogService:address}" 
            binding="#{client:Default_IMyLogService:binding}" 
            bindingConfiguration="#{client:Default_IMyLogService:bindingConfiguration}"
            contract="ServiceProxy.IMyLogService" name="Default_IMyLogService" />
    
        </client>
      </system.serviceModel>

    </configuration>
    ```

    <p class='note'><strong>Note:</strong> Transform xml attributes and tokens are case-sensitive.</p>

## <a id='create-manifest'></a> Create a Parameterized Cloud Foundry App Manifest 

Cloud Foundry performs token replacements during `cf push` by using an extension buildpack. 
You must provide a Cloud Foundry app manifest for the extension buildpack to perform token 
replacements for your application.  

Perform the following steps to test your tokenizations by using environment variables 
to perform token replacements from a Cloud Foundry App Manifest.  

<p class='note'><strong>Note:</strong> Adding token replacements with Environment variables is only for experimental activities. 
    The manifest should contain configuration item keys and values for testing purposes only. 
    Configuration settings should be externalized using git repositories and Spring Cloud Config Server.  
    For more information about externalizing configuration settings in Spring Cloud Config Server, 
    see <a href="#move-to-spring-cloud">Establish a Spring Cloud Config Server</a>, below.
</p>

### <a id='create-manifest'></a> Create a Cloud Foundry App Manifest  

To create a Cloud Foundry app manifest for your workload, complete the following steps:  

1. Ensure your application has a Cloud Foundry manifest file. 
If the manifest file does not exist create it.  
<br>
    If your application is in Cloud Foundry, you can create the manifest file 
    by running the following command:  

    ```
    cf create-app-manifest APP-NAME
    ```

    Where `APP-NAME` is your app's name.

### <a id='modify-manifest'></a> Modify Your Cloud Foundry App Manifest  

You should prepare your Cloud Foundry app manifest for token replacement with 
debug/development environment connection values.  

To configure your workload's Cloud Foundry app manifest for token replacement, complete the following steps:  

1. Review [web-config-transform-buildpack](https://github.com/cloudfoundry-community/web-config-transform-buildpack/releases) 
    in GitHub to determine the Web Config Transform Buildpack version to pull.  

1. Backup your app manifest file.  

1. Open the app manifest file in a text editor.

1. Add a reference for your chosen Web Config Transform Buildpack version to the manifest file's `buildpacks` 
property.  

    ```yaml
    - https://github.com/cloudfoundry-community/web-config-transform-buildpack/releases/download/VERSION/web-config-transform-buildpack-VERSION.zip
    ```

    Where:  
    * `VERSION` is the buildpack version.   

    For example:

    ```yaml
    buildpacks:
    - https://github.com/cloudfoundry-community/web-config-transform-buildpack/releases/download/v1.1.5/web-config-transform-buildpack-v1.1.5.zip
    - hwc_buildpack
    ```    

    <p class='note'><strong>Note:</strong> Ensure the new entry precedes the existing 
      <code>hwc_buildpack</code> buildpacks entry. The <code>hwc_buildpack</code> entry is the step
      performing token replacement on <code>cf push</code> action.
    </p>

  
1. Add `key:value` pairs to the manifest for each the Web Config file's tokenized settings. 
Create each `key:value` pair line using the following format:  

    ```yaml
    "SETTING-NAME": "SETTING-VALUE"
    ```

    Where:    
    * `SETTING-NAME` is the name of a configuration setting used by your app.  
    * `SETTING-VALUE` is the development value of the setting.  

    For example:

    ```yaml
    env:
      "connectionStrings:MyDB": "Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;User ID=serviceacc3;Password=PaKsAsEwWoOrOdT3"
    ```

    <p class='note'><strong>Note:</strong> Create as many <code>key:value</code> pair lines as are 
        needed by your application. The values you provide should be your debug/development 
        environment's connection values.
    </p>

1. Review the resulting manifest file. The manifest file should adhere to the following format:

    ```yaml
    applications:
    - name: APP-NAME
      stack: windows
      buildpacks:
      - https://github.com/cloudfoundry-community/web-config-transform-buildpack/releases/download/VERSION/web-config-transform-buildpack-VERSION.zip
      - hwc_buildpack
      env:
        "SETTING-NAME": "SETTING-VALUE"
    ```

    Where:  
    * `APP-NAME` is your app's name.  
    * `VERSION` is the buildpack version.   
    * `SETTING-NAME` is the name of a configuration setting used by your app. 
    * `SETTING-VALUE` is the development value of the setting. 

    For example:

    ```yaml
    applications:
    - name: sampleapp
      stack: windows
      buildpacks:
      - https://github.com/cloudfoundry-community/web-config-transform-buildpack/releases/download/v1.1.5/web-config-transform-buildpack-v1.1.5.zip
      - hwc_buildpack
      env:
        "connectionStrings:MyDB": "Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;User ID=serviceacc3;Password=PaKsAsEwWoOrOdT3"
    ```

### <a id='test-push'></a> Validation Test the App

1. To verify your config settings are properly transformed by 
building and pushing your app to Cloud Foundry, run the following command:   

    ```script
    cf push
    ```

## <a id='move-to-spring-cloud'></a> Establish a Spring Cloud Config Server 

You must store your environment-specific transformations in a secured environment for your deployment to be production-ready.  

A multi-environment, production-ready deployment configuration can be achieved by using Spring Cloud Config Server 
backed by transforms stored in a git repository data source.

### <a id='create-for-spring-cloud'></a> Create Configurations for Spring Cloud Config Server

To create transformations for use by Spring Cloud Config Server, complete the following steps:   

1. Determine the name you are using for your environment. For example you could be creating a "Development", "Debug" or "Production" manifest.
    <p class='note'><strong>Note:</strong> You will use this name for both the file you create in this task as well as
    in your manifest file's <code>ASPNETCORE_ENVIRONMENT</code> environment variable value.
    </p>

1. Create a YAML file to hold your common settings across all environments. 
Name the file `YOUR-APPLICATION`.yaml.  
<br>
    Where `YOUR-APPLICATION` is the identifier name for your application.  
<br>
    For example:  
<br> 
    **sampleapp.yaml**  

    ```yaml
    appSettings:
      Setting1: "Common setting1"  
      ```

1. Create separate YAML files for each unique environment to hold your environment-specific settings. 
Name the files `YOUR-APPLICATION`-`APP-ENVIRONMENT`.yaml.  
<br>
    Where:  
    * `YOUR-APPLICATION` is the identifier name for your application.  
    * `APP-ENVIRONMENT` is the `ASPNETCORE_ENVIRONMENT` environment variable value.  

    For example:  
<br> 
    **sampleapp-Development.yaml**  

    ```yaml
     connectionStrings:
       MyDB: "Data Source=devserver;Initial Catalog=mydb;User ID=serviceacc3;Password=PaKsAsEwWoOrOdT3"
    ```

    **sampleapp-Production.yaml**  

    ```yaml
     connectionStrings:
       MyDB: "Data Source=prodserver;Initial Catalog=mydb;User ID=serviceacc3;Password=PaKsAsEwWoOrOdT3"
    ```    

### <a id='copy-to-git'></a> Move Your Configurations to a Spring Cloud Config Server GitHub Repository

Your Spring Cloud Config Server must be backed by transforms stored in a git repository data source.  

To move your transformations to a git repository, complete the following steps:  

1. Create a network accessible git repository specifically for storing this application's transform configuration files.  

1. Copy the configuration files created in [Create Configurations for Spring Cloud Config Server](#create-for-spring-cloud), above to the new git repository.  


### <a id='create-spring-cloud-service'></a> Create a Configuration Service for Spring Cloud Config Server

The Web Config Transform Extension Buildpack requires a configuration file pointing to your transform configurations 
GitHub repository.  

1. To confirm the name of the config servers available in your CF Marketplace, run the following command:  

    ```
    cf marketplace
    ```

    Review the return and determine whether you have either `p.config-server` or `p-config-server`.  

1. Create a text file for configuration server settings with the following content:  

    ```json
    {
        "git" : { 
            "uri": "https://github.com/ACCOUNT-ID/CONFIG-REPO"
        }

    }
    ```

    Where:  
    * `ACCOUNT-ID` is the is the github account ID.  
    * `CONFIG-REPO` is your github configuration repository.   

1. Save the text file as a JSON file, for example `config-server.json`.  
   <p class='note'><strong>Note:</strong> Ensure file is not BOM-encoded.</p>
1. To create a config server using your configuration file, run the following command:  

    ```script
    cf create-service CONFIG-SERVER-MARKET standard SERVER-NAME  -c .\CONFIG-FILE
    ```

    Where:  
    * `CONFIG-SERVER-MARKET` is the name of the config server available in your CF Marketplace.
    * `SERVER-NAME` is the name for your config server.  
    * `CONFIG-FILE` is the filename of your server config json file.  

    For example:

    <pre class="terminal">
    $ cf create-service p.config-server standard my_configserver  -c .\config-server.json
    </pre>

### <a id='parameterize-manifest'></a> Configure Your App Manifest File for Spring Cloud Server

Your app manifest file must be modified so it accepts configuration values from your externalized gitHub repository values.

1. Backup your app manifest file.  

1. To parameterize your environment string, replace your manifest's hardcoded `env` value with `ASPNETCORE_ENVIRONMENT: ((env))` using the following format:  

    ```yaml
    env:
      ASPNETCORE_ENVIRONMENT: ((env))     
    ```

1. To bind your config server to your app, add a new `services` section to your app manifest file 
using the following format:

    ```yaml
    services:
    - SERVER-NAME     
    ```

    Where `SERVER-NAME` is the name for your config server.  
<br>

1. Review the resulting manifest file. The manifest file should adhere to the following format:
    
    ```yaml
    applications:
    - name: sampleapp
      stack: windows
      buildpacks:
      - https://github.com/cloudfoundry-community/web-config-transform-buildpack/releases/download/VERSION/web-config-transform-buildpack-VERSION.zip
      - hwc_buildpack
      env:
        ASPNETCORE_ENVIRONMENT: ((env))  

      services:
      - SERVER-NAME     
    ```

    Where:  
    * `VERSION` is the buildpack version.  
    * `SERVER-NAME` is the name for your config server. 
    
    For example:

    ```yaml
    ---
    applications:
    - name: sampleapp
      stack: windows
      buildpacks: 
        - https://github.com/cloudfoundry-community/web-config-transform-buildpack/releases/download/v1.1.5/Pivotal.Web.Config.Transform.Buildpack-win-x64-1.1.5.zip
        - hwc_buildpack
      env:
        ASPNETCORE_ENVIRONMENT: ((env))

      services:
      - my_configserver
    ```

## <a id='push-app'></a> Push the App

You can now push your app using your parameterized configuration.

1. To push your app, run the following command:  

    ```script
    cf push --var env=CD-STEP
    ```
<br>
    Where `CD-STEP` is the suffix used on your Web.config external settings YAML file's filename, such as `Development`, `QA`, `UAT`, or `Production`.  
<br>
    For example:  

    ```script
    cf push --var env=Production
    ```

1. To confirm your app runs using your WebConfig Transform, 
review your logs for `WebConfig Transform Buildpack execution`:   

    ```
    ================================================================================
    =============== WebConfig Transform Buildpack execution started ================
    ================================================================================
    -----> Using Environment: Production
    -----> Config server binding found...
    ```


## <a id='trouble'></a> Troubleshooting

For any issues you face with the web-config-transform-buildpack, 
please raise an issue at [Issues](https://github.com/cloudfoundry-community/web-config-transform-buildpack/issues) in the _Web Config Transform Buildpack_ GitHub repository.

A sample web application can be found here: [WebConfigSampleApp](https://github.com/cloudfoundry-community/webconfig-example-app/tree/master/WebConfigSampleApp).
